##############################################################################
# This file is automatically generated and can be overwritten, do no change
# this file manually.
##############################################################################
# Build global options
# NOTE: Can be overridden externally.
#

# Compiler options here.
ifeq ($(USE_OPT),)
  USE_OPT = -O0 -ggdb -fomit-frame-pointer -falign-functions=16
endif

# C specific options here (added to USE_OPT).
ifeq ($(USE_COPT),)
  USE_COPT = 
endif

# C++ specific options here (added to USE_OPT).
ifeq ($(USE_CPPOPT),)
  USE_CPPOPT = -fno-rtti
endif

# Enable this if you want the linker to remove unused code and data.
ifeq ($(USE_LINK_GC),)
  USE_LINK_GC = yes
endif

# If enabled, this option allows to compile the application in VLE mode.
ifeq ($(USE_VLE),)
  USE_VLE = yes
endif

# Linker options here.
ifeq ($(USE_LDOPT),)
  USE_LDOPT = 
endif

# Enable this if you want to see the full log while compiling.
ifeq ($(USE_VERBOSE_COMPILE),)
  USE_VERBOSE_COMPILE = no
endif

#
# Build global options
##############################################################################

##############################################################################
# Project, sources and paths
#

# Define project name here
PROJECT = out

# Imported source files
include components/components.mak

# Checks if there is a user mak file in the project directory.
ifneq ($(wildcard user.mak),) 
    include user.mak
endif

# Define linker script file here
LDSCRIPT= application.ld

# C sources here.
CSRC =      $(LIB_C_SRC) \
            $(APP_C_SRC) \
            $(U_C_SRC) \
            ./components/components.c \
            ./main.c

# C++ sources here.
CPPSRC =    $(LIB_CPP_SRC) \
            $(APP_CPP_SRC) \
            $(U_CPP_SRC)

# List ASM source files here
ASMSRC =    $(LIB_ASM_SRC) \
            $(APP_ASM_SRC) \
            $(U_ASM_SRC)

INCDIR =    $(LIB_INCLUDES) \
            $(APP_INCLUDES) \
            ./components

#
# Project, sources and paths
##############################################################################

##############################################################################
# Compiler settings
#

MCU  = e200zx -meabi -msdata=none -mnew-mnemonics -mregnames

TRGT = ppc-vle-
CC   = $(TRGT)gcc
CPPC = $(TRGT)g++
# Enable loading with g++ only if you need C++ runtime support.
# NOTE: You can use C++ even without C++ support if you are careful. C++
#       runtime support makes code size explode.
LD   = $(TRGT)gcc
#LD   = $(TRGT)g++
CP   = $(TRGT)objcopy
AS   = $(TRGT)gcc -x assembler-with-cpp
OD   = $(TRGT)objdump
HEX  = $(CP) -O ihex
BIN  = $(CP) -O binary

# Define C warning options here
CWARN = -Wall -Wextra -Wstrict-prototypes

# Define C++ warning options here
CPPWARN = -Wall -Wextra

#
# Compiler settings
##############################################################################

include C:/SPC5Studio/eclipse/plugins/com.st.tools.spc5.components.platform.spc563mxx_1.0.0.201305101230/component/lib/rsc/rules.mk
